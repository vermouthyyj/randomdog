{"version":3,"sources":["HomePage/HomePage.style.js","HomePage/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["Background","styled","div","PageWrapper","ImageWrapper","API","ISVIDEO","ISIMAGE","HomePage","props","getFileType","url","type","split","pop","includes","console","log","renderDifferentTypes","index","src","alt","controls","onChange","fetchPhotos","state","dogPictures","isLoaded","size","photoList","i","fetch","method","response","json","data","this","push","setState","map","item","style","width","heigth","display","margin","onClick","Component","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uxCAEO,IAAMA,EAAaC,IAAOC,IAAV,KAaVC,EAAcF,IAAOC,IAAV,KAWXE,EAAeH,IAAOC,IAAV,K,QCnBnBG,EAAM,+BACNC,EAAU,CAAC,OACXC,EAAU,CAAC,MAAO,MAAO,OAAQ,OAmHxBC,E,kDA/GX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA0CVC,YAAc,SAACC,GACX,IAAMC,EAAOD,EAAIE,MAAM,KAAKC,MAC5B,OAAIR,EAAQS,SAASH,IACjBI,QAAQC,IAAI,2BACL,SAEFV,EAAQQ,SAASH,GACf,QAGA,SArDI,EA0DnBM,qBAAuB,SAACP,EAAKQ,GACzB,IAAIP,EAAO,EAAKF,YAAYC,GAC5B,OAAQC,GACJ,IAAK,QACD,OAAO,qBAAKQ,IAAKT,EAAiBU,IAAI,OAAXF,GAC/B,IAAK,QACD,OAAO,wBAAmBG,UAAQ,EAA3B,UACH,wBAAQF,IAAKT,EAAKC,KAAK,cADpB,iDAAYO,GAIvB,QACIH,QAAQC,IAAI,wBAAyBL,KArE9B,EA0EnBW,SAAW,WAEP,EAAKC,YAAYnB,EA/ER,IAKT,EAAKoB,MAAQ,CACTC,YAAa,GACbC,UAAU,GAGd,EAAKH,YAAYnB,EAVR,GAGM,E,iGAWDM,EAAKiB,G,+EACfC,EAAY,GAEPC,EAAI,E,YAAGA,EAAIF,G,iCACKG,MAAMpB,EAAK,CAC5BqB,OAAQ,Q,cADRC,E,gBAIaA,EAASC,O,OAAtBC,E,OACAvB,EAAOwB,KAAK1B,YAAYyB,EAAKxB,K,WAGjB,UAATC,E,kCACcmB,MAAMpB,EAAK,CACxBqB,OAAQ,Q,eADZC,E,iBAGaA,EAASC,O,QAAtBC,E,OACAvB,EAAOwB,KAAK1B,YAAYyB,EAAKxB,K,wBAGjCkB,EAAUQ,KAAK,CACX1B,IAAKwB,EAAKxB,IACVC,KAAMA,I,QAnBYkB,I,uBAsB1BM,KAAKE,SAAS,CACVZ,YAAaG,EACbF,UAAU,I,yIA2CR,IAAD,SAC2BS,KAAKX,MAA/BE,EADD,EACCA,SAAUD,EADX,EACWA,YAChB,OAAKC,EAKG,eAAC3B,EAAD,WACI,6CACA,cAACG,EAAD,UACI,gCACI,cAACC,EAAD,UACKsB,EAAYa,KAAI,SAACC,EAAMrB,GAAP,OACb,EAAKD,qBAAqBsB,EAAK7B,IAAKQ,QAG5C,cAAC,IAAD,CAAQS,KAAM,QACVa,MAAO,CAAEC,MAAO,MAAOC,OAAQ,OAAQC,QAAS,QAASC,OAAQ,WACjEjC,KAAK,UACLkC,QAASV,KAAKb,SAHlB,kCAbT,cAAC,uBAAD,Q,GArFIwB,a,eCARC,MARf,WACE,OACE,cAAC,IAAD,UACA,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3C,OCKtB4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b20e230d.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Background = styled.div`\n    >h1 {\n        text-align: center;\n        font-family: Optima;\n        font-size: 40px;\n    }\n    background: linear-gradient(white,white,#ffce33);\n    height:120%;\n\n    border: solid 2px;\n    border-color: grey;\n`\n\nexport const PageWrapper = styled.div` \n    background: linear-gradient(white,white,#ffce33);\n    width: 80%;\n    height: 80%;\n    border: solid 5px;\n    border-color: grey;\n\n    display: block;\n    margin: 1% auto 5%;\n`\n\nexport const ImageWrapper = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    >img {\n        @media (max-width:500px) {\n            width:100%;\n        }\n        display: inline-block;\n        height: 400px;\n        width: 25%;\n    }\n    >video {\n        @media (max-width:500px) {\n            width:100%;\n        }\n        background-size: cover;\n        // display: inline-block;\n        height: 400px;\n        width: 25%;\n    }\n`;","import React, { Component } from 'react';\nimport { Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport { ImageWrapper, PageWrapper, Background } from './HomePage.style';\nimport { CircleToBlockLoading } from 'react-loadingg';\n\n// constant variables\nconst API = 'https://random.dog/woof.json';\nconst ISVIDEO = ['mp4']\nconst ISIMAGE = ['png', 'jpg', 'jpeg', 'gif']\nconst PHOTONUM = 8;\n\nclass HomePage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dogPictures: [],\n            isLoaded: false,\n        }\n        // render for the first time\n        this.fetchPhotos(API, PHOTONUM);\n    }\n\n    // fetch 8 photos asynchronously\n    async fetchPhotos(url, size) {\n        let photoList = [];\n\n        for (let i = 0; i < size; i++) {\n            let response = await fetch(url, {\n                method: 'GET'\n            });\n\n            let data = await response.json();\n            let type = this.getFileType(data.url);\n\n            // refetch if type is not image nor video\n            while (type === 'ERROR') {\n                response = await fetch(url, {\n                    method: 'GET'\n                });\n                data = await response.json();\n                type = this.getFileType(data.url);\n            }\n\n            photoList.push({\n                url: data.url,\n                type: type\n            })\n        }\n        this.setState({\n            dogPictures: photoList,\n            isLoaded: true,\n        })\n    }\n\n    // check if the file is a video\n    getFileType = (url) => {\n        const type = url.split('.').pop();\n        if (ISVIDEO.includes(type)) {\n            console.log(\"this is a video!!!!!!!!\");\n            return 'video';\n        }\n        else if (ISIMAGE.includes(type)) {\n            return 'image';\n        }\n        else {\n            return 'ERROR';\n        }\n\n    }\n\n    renderDifferentTypes = (url, index) => {\n        let type = this.getFileType(url);\n        switch (type) {\n            case 'image':\n                return <img src={url} key={index} alt='img' />;\n            case 'video':\n                return <video key={index} controls>\n                    <source src={url} type=\"video/mp4\" />\n                    Your browser does not support the video tag.\n                </video>\n            default:\n                console.log(\"Error type of Message\", type);\n        }\n    }\n\n    // re-render when clicking the Button\n    onChange = () => {\n        //reload the photos here\n        this.fetchPhotos(API, PHOTONUM);\n    }\n\n\n\n    render() {\n        var { isLoaded, dogPictures } = this.state;\n        if (!isLoaded) {\n            return <CircleToBlockLoading></CircleToBlockLoading>;\n        }\n        else {\n            return (\n                <Background>\n                    <h1>Random dogs</h1>\n                    <PageWrapper>\n                        <div>\n                            <ImageWrapper>\n                                {dogPictures.map((item, index) => (\n                                    this.renderDifferentTypes(item.url, index)\n                                ))}\n                            </ImageWrapper>\n                            <Button size={\"large\"}\n                                style={{ width: \"50%\", heigth: \"200%\", display: \"block\", margin: \"3% auto\" }}\n                                type=\"primary\"\n                                onClick={this.onChange}>\n                                Get changed!\n                            </Button>\n                        </div>\n                    </PageWrapper>\n                </Background>\n            );\n        }\n    }\n}\n\nexport default HomePage;","import './App.css';\nimport HomePage from \"./HomePage/HomePage\";\nimport {Route , BrowserRouter as Router} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n    <Route exact path=\"/\" component={HomePage}></Route>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}